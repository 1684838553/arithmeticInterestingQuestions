/**
 * 输入一个长度为n的整型数组array，数组中的一个或连续多个整数组成一个子数组，找到一个具有最大和的连续子数组。
 * 1.子数组是连续的，比如[1,3,5,7,9]的子数组有[1,3]，[3,5,7]等等，但是[1,3,7]不是子数组
 * 2.如果存在多个最大和的连续子数组，那么返回其中长度最长的，该题数据保证这个最长的只存在一个
 * 3.该题定义的子数组的最小长度为1，不存在为空的子数组，即不存在[]是某个数组的子数组
 * 4.返回的数组不计入空间复杂度计算
 *
 * 输入 [1,-2,3,10,-4,7,2,-5]
 *
 * 返回值 [3,10,-4,7,2]
 *
 */

/**
 * 解题思路：
 * 动态规划，dp[i]就是以数组下标为i的数做为结尾的最大子序列和，注意是以i为结尾，比如说现在有一个数组{6,-3,-2,7,-15,1,2,2}，我们就下标以1开始，dp[3]就是以-2为结尾的，那么显然dp[3]的最大值就是1咯（6，-3，-2），dp[4]要以7结尾那么以7结尾的子序列最大和就是8（6，-3，-2，7）。
​ 知道dp[i]是啥后，求dp[i]的时候是不是有两种可能，要么就是像上面的dp[4]一样，dp[3]求出来是1了，再加上自己array[4]是最大的，那么还有一种可能就是说如果dp[3]我求出来是-100，那如果我也是dp[3]+array[4]的话是-93，这时候dp[3]反而是累赘，最大就是自己。
*/
// 求连续子数组的最大和
function FindGreatestSum(array) {
  // write code here
  let max = array[0];
  for (let i = 1; i < array.length; i++) {
    array[i] += Math.max(array[i - 1], 0);
    max = Math.max(array[i], max);
  }

  return max;
}
